/*! @keithclark/shaderview v1.0.0 - Keith Clark - MIT license */
class e extends Error{constructor(e,r=""){super(e),console.error(e+"\n  "+r.replace(/\n/g,"\n  "))}}class r{#e;#r;#t;constructor(e,r,t){this.#e=e,this.#r=this.#n(r,t),this.#t=this.#o(this.#r)}#i(r,t){const n=this.#e,o=n.createShader(t);if(n.shaderSource(o,r),n.compileShader(o),!n.getShaderParameter(o,n.COMPILE_STATUS))throw new e(`Shader compilation failed (SHADER_TYPE=${t})`,n.getShaderInfoLog(o));return o}#n(r,t){const n=this.#e;n.clearColor(1,1,1,0);const o=this.#i(t,n.VERTEX_SHADER),i=this.#i(r,n.FRAGMENT_SHADER),a=n.createProgram();if(n.attachShader(a,o),n.attachShader(a,i),n.linkProgram(a),!n.getProgramParameter(a,n.LINK_STATUS))throw new e("Program link failed",n.getProgramInfoLog(a));n.useProgram(a);const s=new Float32Array([1,1,-1,1,1,-1,-1,-1]),c=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,c),n.bufferData(n.ARRAY_BUFFER,s,n.STATIC_DRAW);const m=n.getAttribLocation(a,"position");return n.enableVertexAttribArray(m),n.vertexAttribPointer(m,2,n.FLOAT,!1,0,0),a}#o=e=>{const r=new Map,t=this.#e,n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let o=0;o<n;o++){const{type:n,name:i}=t.getActiveUniform(e,o),a=t.getUniformLocation(e,i);let s;s=n===t.BOOL?e=>t.uniform1i(a,e?1:0):n===t.FLOAT?e=>t.uniform1f(a,e):n===t.FLOAT_VEC2?(...e)=>t.uniform2f(a,...e):n===t.FLOAT_VEC3?(...e)=>t.uniform3f(a,...e):n===t.FLOAT_VEC4?(...e)=>t.uniform4f(a,...e):n===t.INT?e=>t.uniform1i(a,e):n===t.INT_VEC2?(...e)=>t.uniform2i(a,...e):n===t.INT_VEC3?(...e)=>t.uniform3i(a,...e):n===t.INT_VEC4?(...e)=>t.uniform4i(a,...e):()=>{console.warn(`Uniform "${i}" is an unsupported type ${n}.`)},r.set(i,s)}return r};render(){const e=this.#e,{canvas:r}=e,{width:t,height:n}=r;e.viewport(0,0,t,n),this.#a("uResolution",t,n),e.drawArrays(e.TRIANGLE_STRIP,0,4)}dispose(){const e=this.#e;e.clear(e.COLOR_BUFFER_BIT),e.deleteProgram(this.#r)}setTime(e){this.#a("uTime",e)}#a(e,...r){this.#t.get(e)?.(...r)}setUniform(r,...t){if(!this.#t.has(r))throw new e("Error setting uniform",`Uniform "${r}" does not exist.`);this.#a(r,...t)}}let t,n,o,i=null,a=null,s=0,c=0,m=0,f=0;self.onmessage=e=>{const{cmd:i,data:a}=e.data;if(console.log("incoming:",{cmd:i,data:a}),"setCanvas"===i)n=a,o=n.getContext("webgl");else if("setSource"===i)t=new r(o,a.fragmentSource,a.vertexSource),scheduleRender();else if("resize"===i)s=a.width,c=a.height,scheduleRender();else if("pause"===i)!0===a?h():l();else if("setTime"===i)f=a,m=performance.now()/1e3-f,scheduleRender();else if("dispose"===i){if(!t)return;cancelRender(),h(),t.dispose(),t=null}},cancelRender=()=>{cancelAnimationFrame(i),i=null},scheduleRender=()=>{i||(i=requestAnimationFrame((()=>{t&&(s===n.width&&c===n.height||(n.width=s,n.height=c),t.setTime(f),t.render()),i=null})))};const l=()=>{if(a)return;m=performance.now()/1e3-f;const e=()=>{a=requestAnimationFrame(e),f=performance.now()/1e3-m,scheduleRender()};e()},h=()=>{cancelAnimationFrame(a),a=null};
